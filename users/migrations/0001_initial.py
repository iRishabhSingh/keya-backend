# Generated by Django 5.2.3 on 2025-06-19 12:52

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, db_collation='und-x-icu', db_index=True, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('phone', models.CharField(blank=True, db_index=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('password_hash', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_token', models.CharField(blank=True, max_length=100, null=True)),
                ('verification_expires', models.DateTimeField(blank=True, null=True)),
                ('mfa_enabled', models.BooleanField(default=False)),
                ('mfa_type', models.CharField(choices=[('sms', 'SMS'), ('totp', 'TOTP'), ('email', 'Email'), ('none', 'None')], default='none', max_length=10)),
                ('mfa_secret', models.TextField(blank=True, null=True)),
                ('failed_login_attempts', models.IntegerField(default=0)),
                ('last_failed_login', models.DateTimeField(blank=True, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('primary_language', models.CharField(default='en', help_text='ISO 639-1 language code', max_length=2)),
                ('country', models.CharField(blank=True, help_text='ISO 3166-1 country code', max_length=2, null=True)),
                ('user_timezone', models.CharField(default='UTC', help_text='IANA timezone identifier', max_length=50)),
                ('profile_image', models.URLField(blank=True, max_length=255, null=True)),
                ('referral_code', models.CharField(blank=True, max_length=12, null=True, unique=True)),
                ('referred_by', models.CharField(blank=True, max_length=12, null=True)),
                ('marketing_consent', models.BooleanField(default=False)),
                ('consent_updated', models.DateTimeField(blank=True, null=True)),
                ('lifetime_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('loyalty_points', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='users_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='users_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('personal', 'Personal'), ('business', 'Business')], max_length=10)),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('company', models.CharField(blank=True, max_length=100, null=True)),
                ('tax_id', models.CharField(blank=True, max_length=30, null=True)),
                ('tax_exempt', models.BooleanField(default=False)),
                ('currency', models.CharField(default='USD', help_text='ISO 4217 currency code', max_length=3)),
                ('communication_prefs', models.JSONField(default=dict)),
                ('saved_payment_methods', models.JSONField(default=list)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='users.user')),
            ],
            options={
                'verbose_name': 'profile',
                'verbose_name_plural': 'profiles',
            },
        ),
        migrations.CreateModel(
            name='DeviceSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_hash', models.TextField()),
                ('ip_address', models.GenericIPAddressField(unpack_ipv4=True)),
                ('user_agent', models.TextField()),
                ('country', models.CharField(blank=True, help_text='ISO 3166-1 country code', max_length=2, null=True)),
                ('login_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_sessions', to='users.user')),
            ],
            options={
                'verbose_name': 'device session',
                'verbose_name_plural': 'device sessions',
            },
        ),
        migrations.CreateModel(
            name='AuthProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('provider', models.CharField(choices=[('google', 'Google'), ('facebook', 'Facebook'), ('apple', 'Apple')], max_length=20)),
                ('provider_uid', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, db_collation='und-x-icu', db_index=True, max_length=255, null=True)),
                ('refresh_token', models.TextField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auth_providers', to='users.user')),
            ],
            options={
                'verbose_name': 'auth provider',
                'verbose_name_plural': 'auth providers',
            },
        ),
        migrations.CreateModel(
            name='AuthHistory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('action', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('mfa_attempt', 'MFA Attempt'), ('password_change', 'Password Change'), ('account_lock', 'Account Lock')], max_length=20)),
                ('method', models.CharField(choices=[('password', 'Password'), ('otp', 'OTP'), ('sso', 'SSO')], max_length=20)),
                ('provider', models.CharField(blank=True, max_length=20, null=True)),
                ('success', models.BooleanField()),
                ('ip_address', models.GenericIPAddressField(unpack_ipv4=True)),
                ('device_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth_events', to='users.devicesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auth_history', to='users.user')),
            ],
            options={
                'verbose_name': 'auth history',
                'verbose_name_plural': 'auth history',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('shipping', 'Shipping'), ('billing', 'Billing'), ('both', 'Both')], max_length=10)),
                ('label', models.CharField(blank=True, help_text='e.g., Home, Office', max_length=50, null=True)),
                ('line1', models.CharField(max_length=100)),
                ('line2', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=50)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(help_text='ISO 3166-1 country code', max_length=2)),
                ('is_primary', models.BooleanField(default=False)),
                ('validation_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('invalid', 'Invalid')], default='pending', max_length=10)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='users.profile')),
            ],
            options={
                'verbose_name': 'address',
                'verbose_name_plural': 'addresses',
                'indexes': [models.Index(fields=['profile', 'is_primary'], name='users_addre_profile_e9eef4_idx'), models.Index(fields=['country', 'postal_code'], name='users_addre_country_5cbdc7_idx')],
                'unique_together': {('profile', 'label')},
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_user_email_6f2530_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone'], name='users_user_phone_9474e8_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['referral_code'], name='users_user_referra_cff1f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_user_created_cf865c_idx'),
        ),
        migrations.AddIndex(
            model_name='devicesession',
            index=models.Index(fields=['user', 'is_active'], name='users_devic_user_id_37b4f8_idx'),
        ),
        migrations.AddIndex(
            model_name='devicesession',
            index=models.Index(fields=['ip_address'], name='users_devic_ip_addr_3d57fb_idx'),
        ),
        migrations.AddIndex(
            model_name='devicesession',
            index=models.Index(fields=['last_activity'], name='users_devic_last_ac_ca7ec5_idx'),
        ),
        migrations.AddIndex(
            model_name='authprovider',
            index=models.Index(fields=['user', 'provider'], name='users_authp_user_id_04b392_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='authprovider',
            unique_together={('provider', 'provider_uid')},
        ),
        migrations.AddIndex(
            model_name='authhistory',
            index=models.Index(fields=['user', 'timestamp'], name='users_authh_user_id_5dfc30_idx'),
        ),
        migrations.AddIndex(
            model_name='authhistory',
            index=models.Index(fields=['success', 'action'], name='users_authh_success_124d01_idx'),
        ),
        migrations.AddIndex(
            model_name='authhistory',
            index=models.Index(fields=['ip_address'], name='users_authh_ip_addr_ac23e5_idx'),
        ),
    ]
